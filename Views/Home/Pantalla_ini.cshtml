@{
    ViewBag.Title = "Pantalla Inicial";
}

<h2>Buscar Corredores</h2>

<form id="searchForm" method="post" action="@Url.Action("BuscarCorredores", "Home")">
    <!-- Formulario en una línea con distribución de dos mitades -->
    <div class="d-flex justify-content-between">
        <div class="w-50">
            <div class="form-group w-100">
                <input type="text" id="searchInput" name="nombre" class="form-control w-100" placeholder="Buscar corredor por nombre (opcional)">
            </div>
        </div>
        <div class="w-50 d-flex justify-content-end">
            <div class="form-group mx-2">
                <label for="yearDropdown">Año:</label>
                <select id="yearDropdown" name="yearCarrera" class="form-control">
                    <option value="">Selecciona un año</option>
                    @foreach (var year in ViewBag.Anios)
                    {
                        <option value="@year">@year</option>
                    }
                </select>
            </div>
            <div class="form-group mx-2">
                <label for="edicionDropdown">Edición:</label>
                <select id="edicionDropdown" name="ediCarrera" class="form-control" disabled>
                    <option value="">Selecciona una edición</option>
                </select>
            </div>
            <div class="form-group mx-2">
                <label for="categoriaDropdown">Categoría:</label>
                <select id="categoriaDropdown" name="categoria" class="form-control" disabled>
                    <option value="">Selecciona una categoría</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary mx-2">Buscar</button>
        </div>
    </div>
</form>

@if (!string.IsNullOrEmpty(ViewBag.Error))
{
    <div class="alert alert-danger">@ViewBag.Error</div>
}

<!-- Tabla de resultados (ocupa la mitad de la pantalla) -->
<div id="resultTable" class="mt-4" style="width: 50%; margin: auto;">
    @if (ViewBag.ResultadosBusqueda != null && ViewBag.ResultadosBusqueda.Count > 0)
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Posición</th>
                    <th>Número de Corredor</th>
                    <th>Nombre de Corredor</th>
                    <th>T1</th>
                    <th>T2</th>
                    <th>T3</th>
                    <th>Tiempo Registrado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in ViewBag.ResultadosBusqueda)
                {
                    <tr>
                        <td>@item["Posicion"]</td>
                        <td>@item["NumCorredor"]</td>
                        <td>@item["NombreCorredor"]</td>
                        <td>@item["T1"]</td>
                        <td>@item["T2"]</td>
                        <td>@item["T3"]</td>
                        <td>@item["TiempoTotal"]</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No se encontraron resultados.</p>
    }
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
    // Cuando cambia el año seleccionado
    $('#yearDropdown').change(function () {
        var year = $(this).val();
        if (year) {
            // Solicitar ediciones para el año seleccionado
            $.getJSON('/Home/CargarEdiciones', { yearCarrera: year }, function (data) {
                $('#edicionDropdown').empty().append('<option value="">Selecciona una edición</option>');
                $.each(data, function (i, item) {
                    $('#edicionDropdown').append($('<option>', {
                        value: item,
                        text: item
                    }));
                });
                $('#edicionDropdown').prop('disabled', false);
                $('#categoriaDropdown').empty().append('<option value="">Selecciona una categoría</option>').prop('disabled', true);
            });
        } else {
            $('#edicionDropdown').empty().append('<option value="">Selecciona una edición</option>').prop('disabled', true);
            $('#categoriaDropdown').empty().append('<option value="">Selecciona una categoría</option>').prop('disabled', true);
        }
    });

    // Cuando cambia la edición seleccionada
    $('#edicionDropdown').change(function () {
        var year = $('#yearDropdown').val();
        var edicion = $(this).val();
        if (edicion) {
            // Solicitar categorías para la edición seleccionada
            $.getJSON('/Home/CargarCategorias', { yearCarrera: year, ediCarrera: edicion }, function (data) {
                $('#categoriaDropdown').empty().append('<option value="">Selecciona una categoría</option>');
                $.each(data, function (i, item) {
                    $('#categoriaDropdown').append($('<option>', {
                        value: item,
                        text: item
                    }));
                });
                $('#categoriaDropdown').prop('disabled', false);
            });
        } else {
            $('#categoriaDropdown').empty().append('<option value="">Selecciona una categoría</option>').prop('disabled', true);
        }
    });
</script>
<div class="dropdown mt-3">
    <button class="btn btn-primary dropdown-toggle" type="button" id="gestionCarrerasMenu" data-bs-toggle="dropdown" aria-expanded="false">
        Gestión de Carreras
    </button>
    <ul class="dropdown-menu" aria-labelledby="gestionCarrerasMenu">

        <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#modalNuevaCarrera">Nueva Carrera</a></li>

        <li><a class="dropdown-item" href="@Url.Action("Baja_Carrera", "Home")">Eliminar Carrera</a></li>
        <li><a class="dropdown-item" href="@Url.Action("Editar_Carrera", "Home")">Editar Carrera</a></li>
        <li><a class="dropdown-item" href="@Url.Action("Vincular_Participantes", "Home")">Vincular Participantes</a></li>
        <li><a class="dropdown-item" href="@Url.Action("Generar_Reporte_Carrera", "Home")">Generar Reporte por Carrera</a></li>
    </ul>
</div>

<!-- Modal Nueva Carrera -->
<div class="modal fade" id="modalNuevaCarrera" tabindex="-1" aria-labelledby="modalNuevaCarreraLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalNuevaCarreraLabel">Nueva Carrera</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="formNuevaCarrera">
                    <div class="mb-3">
                        <label for="nombreCarrera" class="form-label">Nombre de la Carrera</label>
                        <input type="text" class="form-control" id="nombreCarrera" required>
                    </div>
                    <div class="mb-3">
                        <label for="yearCarrera" class="form-label">Año de la Carrera</label>
                        <input type="number" class="form-control" id="yearCarrera" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="crearCarrera()">Crear</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Eliminar Carrera -->
<div class="modal fade" id="modalEliminarCarrera" tabindex="-1" aria-labelledby="modalEliminarCarreraLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalEliminarCarreraLabel">Eliminar Carrera</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="carreraSeleccionada" class="form-label">Selecciona una carrera</label>
                    <select class="form-control" id="carreraSeleccionada" onchange="cargarParametrosCarrera()">
                        <option value="">Seleccione una carrera</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="eliminarCarrera()">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    async function crearCarrera() {
        const nombreCarrera = document.getElementById('nombreCarrera').value;
        const yearCarrera = document.getElementById('yearCarrera').value;

        // Verificación de campos vacíos
        if (!nombreCarrera || !yearCarrera) {
            Swal.fire({
                icon: 'error',
                title: 'Campos incompletos',
                text: 'Por favor, complete todos los campos.'
            });
            return;
        }

        try {
            // Enviar los datos al servidor con fetch
            const response = await fetch('@Url.Action("Alta_Carrera", "Home")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    nom_carrera: nombreCarrera,
                    year_carrera: parseInt(yearCarrera)
                })
            });

            const result = await response.json();
            // Mostrar mensaje de éxito o error según el resultado
            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Éxito',
                    text: result.message,
                    timer: 2000,
                    showConfirmButton: false
                }).then(() => {
                    // Redirigir a Pantalla_ini
                    window.location.href = '@Url.Action("Pantalla_ini", "Home")';
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message
                });
            }
        } catch (error) {
            // Mostrar mensaje de error en caso de fallo de la solicitud
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Ocurrió un error al intentar crear la carrera. Intente nuevamente.'
            });
        }
    }
</script>

<script>
    // Cargar las carreras en el desplegable
    async function cargarCarreras() {
        const response = await fetch('@Url.Action("ObtenerCarreras", "Home")');
        const carreras = await response.json();

        const select = document.getElementById('carreraSeleccionada');
        carreras.forEach(carrera => {
            const option = document.createElement('option');
            option.value = carrera.Id;
            option.textContent = carrera.Descripcion;
            select.appendChild(option);
        });
    }

    // Cargar los parámetros de la carrera seleccionada
    async function cargarParametrosCarrera() {
        const carreraId = document.getElementById('carreraSeleccionada').value;

        if (carreraId) {
            const response = await fetch('@Url.Action("VerificarTiempos", "Home")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ carreraId: carreraId })
            });
            const result = await response.json();

            if (result.success) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'La carrera tiene tiempos registrados y no puede ser eliminada.'
                });
                document.querySelector('.btn-primary').disabled = true;
            } else {
                document.querySelector('.btn-primary').disabled = false;
            }
        }
    }

    // Eliminar la carrera seleccionada
    async function eliminarCarrera() {
        const carreraId = document.getElementById('carreraSeleccionada').value;

        if (!carreraId) {
            Swal.fire({
                icon: 'error',
                title: 'Selecciona una carrera',
                text: 'Por favor, selecciona una carrera para eliminar.'
            });
            return;
        }

        try {
            const response = await fetch('@Url.Action("Baja_Carrera", "Home")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ carreraId: carreraId })
            });

            const result = await response.json();
            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Carrera eliminada',
                    text: 'La carrera ha sido eliminada correctamente.',
                    timer: 2000,
                    showConfirmButton: false
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Hubo un problema al eliminar la carrera.'
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Ocurrió un error al intentar eliminar la carrera. Intente nuevamente.'
            });
        }
    }

    // Inicializar los datos cuando se cargue la página
    document.addEventListener('DOMContentLoaded', cargarCarreras);
</script>