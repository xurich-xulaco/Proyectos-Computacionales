@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewBag.Title = "Pantalla Inicial";
}
<nav class="navbar navbar-expand-sm header" style="background-color:rgb(0, 51, 102)">
    <div class="container-fluid">
        <!-- Logo -->
        <a class="navbar-brand" href="#">
            <img src="https://wp.uaslp.mx/informe/wp-content/uploads/sites/2/2024/04/UASLP.png"
                 alt="Logo" style="max-width: 150px; height: auto;">
        </a>

        <!-- Botón para móviles con color blanco -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarContent"
                style="border-color: white;">
            <span class="navbar-toggler-icon" style="filter: invert(1);"></span>
        </button>

        <!-- Contenido colapsable -->
        <div class="collapse navbar-collapse justify-content-end" id="navbarContent">
            <div class="d-flex align-items-center gap-3">
                <h4 class="text-white m-0">@HttpContextAccessor.HttpContext.Session.GetString("Usuario")</h4>
                <form asp-controller="Home" asp-action="Logout" method="post">
                    <button id="logoutButton" class="btn btn-outline-light">Cerrar sesión</button>
                </form>
            </div>
        </div>
    </div>
</nav>

<nav class="navbar navbar-expand-lg" style="background-color: rgb(0, 51, 102);">
    <div class="container-fluid">
        <!-- Contenido del menú -->
        <div class="navbar-collapse justify-content-center" id="navbarNav">
            <ul class="navbar-nav d-flex flex-wrap gap-lg-3 gap-1">
                <!-- Gestión de corredores -->
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle text-white" href="#" role="button" data-bs-toggle="dropdown"
                       style="background-color:#004A98; padding: 10px; border-radius: 5px;">
                        Gestión de corredores
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" asp-controller="Home" asp-action="Crear_Corredor">Nuevo Corredor</a></li>
                        <li><a class="dropdown-item" asp-controller="Home" asp-action="Importar_Corredores">Importar corredores</a></li>
                        <li><a class="dropdown-item" asp-controller="Home" asp-action="Importar_tiempos">Importar tiempos</a></li>
                        <li><a class="dropdown-item" asp-controller="Home" asp-action="Reporte_corredor">Reporte de Corredor</a></li>
                    </ul>
                </li>

                <!-- Gestión de carreras -->
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle text-white" href="#" role="button" data-bs-toggle="dropdown"
                       style="background-color:#004A98; padding: 10px; border-radius: 5px;">
                        Gestión de carreras
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" asp-controller="Home" asp-action="Crear_Carrera">Nueva Carrera</a></li>
                        <li><a class="dropdown-item" asp-controller="Home" asp-action="Eliminar_Carrera">Eliminar Carrera</a></li>
                        <li><a class="dropdown-item" asp-controller="Home" asp-action="Editar_Carrera">Editar Carrera</a></li>
                        <li><a class="dropdown-item" asp-controller="Home" asp-action="Reporte_carrera">Generar reporte de carrera</a></li>
                    </ul>
                </li>

                <!-- Gestión de Administradores -->
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle text-white" href="#" role="button" data-bs-toggle="dropdown"
                       style="background-color:#004A98; padding: 10px; border-radius: 5px;">
                        Gestión de Administradores
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" asp-controller="Home" asp-action="Alta_administrador">Nuevo Administrador</a></li>
                        <li><a class="dropdown-item" asp-controller="Home" asp-action="Baja_administrador">Eliminar Administrador</a></li>
                    </ul>
                </li>

                <!-- Botón de exportar resultados -->
                <li class="nav-item">
                    <button id="exportarExcel" class="btn text-white w-100 w-md-auto text-start"
                            style="background-color:#004A98; padding: 10px; border-radius: 5px;">
                        Exportar resultados
                    </button>
                </li>
            </ul>
        </div>
    </div>
</nav>

<br>
<div class="container-fluid">
    <form id="searchForm" method="post" asp-action="BuscarCorredores">
        <div class="row gx-3 gy-2 align-items-center">
            <!-- Nombre del Corredor -->
            <div class="col-12 col-md">
                <label for="nombreCorredor" class="form-label"><strong>Nombre del Corredor:</strong></label>
                <input type="text" name="nombreCorredor" id="nombreCorredor" class="form-control"
                       value="@ViewBag.NombreBuscado" placeholder="Nombre del corredor" />
            </div>

            <!-- Año -->
            <div class="col-12 col-md">
                <label for="yearCarrera" class="form-label"><strong>Año:</strong></label>
                <select id="yearCarrera" name="yearCarrera" class="form-control">
                    <option value="">Seleccione un año</option>
                    @foreach (var anio in ViewBag.Anios)
                    {
                        var isSelected = Convert.ToString(ViewBag.SelectedYear) == Convert.ToString(anio) ? "selected" : "";
                        <option value="@anio" selected="@isSelected">@anio</option>
                    }
                </select>
            </div>

            <!-- Edición -->
            <div class="col-12 col-md">
                <label for="ediCarrera" class="form-label"><strong>Edición:</strong></label>
                <select id="ediCarrera" name="ediCarrera" class="form-control">
                    <option value="">Seleccione una edición</option>
                    @if (ViewBag.SelectedEdition != null)
                    {
                        <option value="@ViewBag.SelectedEdition" selected>@ViewBag.SelectedEdition</option>
                    }
                </select>
            </div>

            <!-- Categoría -->
            <div class="col-12 col-md">
                <label for="categoria" class="form-label"><strong>Categoría:</strong></label>
                <select id="categoria" name="categoria" class="form-control">
                    <option value="">Seleccione una categoría</option>
                    @if (!string.IsNullOrEmpty(ViewBag.SelectedCategory))
                    {
                        <option value="@ViewBag.SelectedCategory" selected>@ViewBag.SelectedCategory</option>
                    }
                </select>
            </div>

            <!-- Botón de Búsqueda -->
            <div class="col-12 col-md-auto">
                <button type="submit" class="btn btn-primary w-100">Buscar</button>
            </div>
        </div>
    </form>

    @if (!string.IsNullOrEmpty(ViewBag.Error))
    {
        <div class="alert alert-danger mt-3">@ViewBag.Error</div>
    }
</div>


<div class="container-fluid">
    <div class="row">
        <div id="resultTable" class="mt-4 mx-auto col-12">
            <div class="table-responsive">
                <table class="table table-primary table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>Posición</th>
                            <th>Número</th>
                            <th>Nombre</th>
                            <th>T1</th>
                            <th>T2</th>
                            <th>T3</th>
                            <th>Tiempo Total</th>
                            <th>Opciones</th>
                        </tr>
                    </thead>
                    @if (ViewBag.ResultadosBusqueda != null && ViewBag.ResultadosBusqueda.Count > 0)
                    {
                        <tbody class="table-group-divider">
                            @foreach (var corredor in ViewBag.ResultadosBusqueda)
                            {
                                <tr>
                                    <td>@corredor["Posicion"]</td>
                                    <td>@corredor["NumCorredor"]</td>
                                    <td>@corredor["Nombre"]</td>
                                    <td>@corredor["T1"]</td>
                                    <td>@corredor["T2"]</td>
                                    <td>@corredor["T3"]</td>
                                    <td>@corredor["T4"]</td>
                                    <td>
                                        <button type="button" class="btn btn-danger eliminar-corredor"
                                                data-year="@ViewBag.SelectedYear"
                                                data-edition="@ViewBag.SelectedEdition"
                                                data-category="@ViewBag.SelectedCategory"
                                                data-numcorredor="@corredor["NumCorredor"]">
                                            Eliminar
                                        </button>

                                        <button type="button" class="btn btn-warning modificar-corredor"
                                                data-year="@ViewBag.SelectedYear"
                                                data-edition="@ViewBag.SelectedEdition"
                                                data-category="@ViewBag.SelectedCategory"
                                                data-numcorredor="@corredor["NumCorredor"]">
                                            Modificar
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    }
                    else if (ViewBag.ResultadosBusqueda != null)
                    {
                        <tbody>
                            <tr>
                                <td colspan="8" class="text-center">No se encontraron resultados para los criterios de búsqueda.</td>
                            </tr>
                        </tbody>
                    }
                </table>
            </div>
        </div>
    </div>
</div>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>


<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    //agregado
    document.querySelector("#logoutButton").addEventListener("click", function () {
        fetch('/Home/Logout', { method: 'POST' })
            .then(response => {
                window.location.replace("/Home/Index"); // Redirige sin guardar en el historial
            });
    });
    document.addEventListener("DOMContentLoaded", function () {
        const yearSelect = document.getElementById("yearCarrera");
        const ediSelect = document.getElementById("ediCarrera");
        const catSelect = document.getElementById("categoria");
        const nameInput = document.getElementById("nombreCorredor");

        // 🔹 Restaurar valores guardados en localStorage después de una búsqueda
        yearSelect.value = localStorage.getItem("yearCarrera") || "";
        ediSelect.value = localStorage.getItem("ediCarrera") || "";
        catSelect.value = localStorage.getItem("categoria") || "";
        nameInput.value = localStorage.getItem("nombreCorredor") || "";

        // 🔹 Guardar valores en localStorage antes de enviar el formulario
        document.getElementById("searchForm").addEventListener("submit", function () {
            localStorage.setItem("yearCarrera", yearSelect.value);
            localStorage.setItem("ediCarrera", ediSelect.value);
            localStorage.setItem("categoria", catSelect.value);
            localStorage.setItem("nombreCorredor", nameInput.value);
        });

        // 🔹 Función para cargar ediciones cuando se selecciona un año
        function cargarEdiciones() {
            let year = yearSelect.value;
            ediSelect.innerHTML = '<option value="">Seleccione una edición</option>';
            catSelect.innerHTML = '<option value="">Seleccione una categoría</option>'; // Resetear categorías

            if (year) {
                fetch(`/Home/CargarEdiciones?yearCarrera=${year}`)
                    .then(response => response.json())
                    .then(data => {
                        data.forEach(edi => {
                            let selected = edi == localStorage.getItem("ediCarrera") ? "selected" : "";
                            ediSelect.innerHTML += `<option value="${edi}" ${selected}>${edi}</option>`;
                        });

                        // Si hay ediciones cargadas y había una selección previa, dispara el evento de cambio
                        if (localStorage.getItem("ediCarrera")) {
                            ediSelect.value = localStorage.getItem("ediCarrera");
                            cargarCategorias();
                        }
                    })
                    .catch(error => console.error("Error al cargar ediciones:", error));
            }
        }

        // 🔹 Función para cargar categorías cuando se selecciona una edición
        function cargarCategorias() {
            let year = yearSelect.value;
            let edi = ediSelect.value;
            catSelect.innerHTML = '<option value="">Seleccione una categoría</option>'; // Resetear categorías

            if (year && edi) {
                fetch(`/Home/CargarCategorias?yearCarrera=${year}&ediCarrera=${edi}`)
                    .then(response => response.json())
                    .then(data => {
                        data.forEach(cat => {
                            let selected = cat === localStorage.getItem("categoria") ? "selected" : "";
                            catSelect.innerHTML += `<option value="${cat}" ${selected}>${cat}</option>`;
                        });

                        // Si había una categoría seleccionada, restáurala
                        if (localStorage.getItem("categoria")) {
                            catSelect.value = localStorage.getItem("categoria");
                        }
                    })
                    .catch(error => console.error("Error al cargar categorías:", error));
            }
        }

        // 🔹 Eventos para cargar ediciones y categorías dinámicamente
        yearSelect.addEventListener("change", cargarEdiciones);
        ediSelect.addEventListener("change", cargarCategorias);

        // 🔹 Disparar eventos después de cargar la página para restaurar datos
        if (yearSelect.value) {
            cargarEdiciones();
        }
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".eliminar-corredor").forEach(button => {
            button.addEventListener("click", function () {
                let yearCarrera = this.getAttribute("data-year");
                let ediCarrera = this.getAttribute("data-edition");
                let categoria = this.getAttribute("data-category");
                let numCorredor = this.getAttribute("data-numcorredor");

                if (!yearCarrera || !ediCarrera || !categoria || !numCorredor) {
                    alert("Error: No se encontraron los datos del corredor.");
                    return;
                }

                // Redirigir a la pantalla de eliminar con los datos en la URL
                window.location.href = `/Home/Eliminar_Corredor?yearCarrera=${yearCarrera}&ediCarrera=${ediCarrera}&categoria=${categoria}&numCorredor=${numCorredor}`;
            });
        });
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".modificar-corredor").forEach(button => {
            button.addEventListener("click", function () {
                const year = this.getAttribute("data-year");
                const edition = this.getAttribute("data-edition");
                const category = this.getAttribute("data-category");
                const numCorredor = this.getAttribute("data-numcorredor");

                const url = `/Home/Modificar_Corredor?year=${year}&edition=${edition}&category=${category}&numcorredor=${numCorredor}`;
                window.location.href = url;
            });
        });
    });
</script>

<script>
    // Función para iniciar la descarga creando un enlace <a> dinámico
    function iniciarDescarga(url) {
        const a = document.createElement('a');
        a.href = url;
        a.download = ''; // Se usará el nombre indicado en el header Content-Disposition
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    }

    $(document).ready(function () {
        // Evento para exportar Excel
        $('#exportarExcel').click(function () {
            var yearCarrera = $('#yearCarrera').val();
            var ediCarrera = $('#ediCarrera').val();
            var categoria = $('#categoria').val();

            // Validación de campos obligatorios
            if (!yearCarrera || !ediCarrera || !categoria) {
                Swal.fire('Error', 'Por favor, completa todos los campos requeridos (año, edición y categoría).', 'error');
                return;
            }

            // Verificar si hay corredores en pantalla
            if ($('#resultTable tbody tr').length === 0) {
                Swal.fire('Error', 'Actualmente no hay corredores para exportar.', 'error');
                return;
            }

            // Confirmación para evitar clic accidental
            Swal.fire({
                title: '¿Generar Excel?',
                text: '¿Deseas generar el archivo Excel con los resultados?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Sí, generar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    var nombreCorredor = $('#nombreCorredor').val() || '';

                    // Mostrar SweetAlert de carga
                    Swal.fire({
                        title: 'Generando Excel...',
                        text: 'Por favor espera mientras se genera el archivo.',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    // Llamada GET a la acción ExportarResultadosExcel
                    $.get('/Home/ExportarResultadosExcel', {
                        yearCarrera: yearCarrera,
                        ediCarrera: ediCarrera,
                        categoria: categoria,
                        nombreCorredor: nombreCorredor
                    })
                    .done(function (data) {
                        Swal.close();
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: '¡Excel generado!',
                                text: 'El archivo Excel se generó correctamente.'
                            }).then(() => {
                                iniciarDescarga(data.downloadUrl);
                            });
                        } else {
                            Swal.fire('Error', data.message, 'error');
                        }
                    })
                    .fail(function () {
                        Swal.close();
                        Swal.fire('Error', 'No se pudo generar el Excel. Verifica tu conexión.', 'error');
                    });
                }
            });
        });
    });
</script>